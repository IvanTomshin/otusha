version: "3.8"

services:
# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  postgres:
    container_name: postgres
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./postgres:/var/lib/postgresql/data
    expose:
      - '5432'
    ports:
      - '5432:5432'
    restart: always
    networks:
      - internal

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö slave1
#  postgres_slave1:
#    container_name: postgres_slave1
#    image: postgres:16-alpine
#    environment:
#      - POSTGRES_USER=${DB_USER}
#      - POSTGRES_PASSWORD=${DB_PASSWORD}
#    volumes:
#      - ./postgres_slave:/var/lib/postgresql/data
#    expose:
#      - '5432'
#    ports:
#      - '15432:5432'
#    restart: always
#    networks:
#      - internal

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö slave2
#  postgres_slave2:
#    container_name: postgres_slave2
#    image: postgres:16-alpine
#    environment:
#      - POSTGRES_USER=${DB_USER}
#      - POSTGRES_PASSWORD=${DB_PASSWORD}
#    volumes:
#      - ./postgres_slave2:/var/lib/postgresql/data
#    expose:
#      - '5432'
#    ports:
#      - '25432:5432'
#    restart: always
#    networks:
#      - internal

  nginx:
    container_name: nginx
    depends_on:
      - postgres
    image: nginx:latest
    ports:
      - '80:80'
# –ø–æ—Ä—Ç —Å–Ω–∞—Ä—É–∂–∏ / –ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –¥–æ–∫–µ—Ä–∞
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./www/otusha:/var/www
      - ./log/nginx:/var/log/nginx
    restart: always
    networks:
      - internal

# php –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  php:
    container_name: php
    build: 
      context: ./php
    image: php:fpm-alpine
    networks:
      - internal
    volumes:
      - ./www/otusha:/var/www
      - ./log/php:/var/log/fpm-php.log
#    command: >
#      bash -c "
#        apk add --no-cache pcre-dev $PHPIZE_DEPS \
#        && pecl install redis \
#        && docker-php-ext-enable redis.so
#      "

# redis
  redis:
    container_name: redis
    image: redis:latest
    networks:
      - internal
    environment:
      - REDIS_PASSWORD=${DB_PASSWORD}
      - REDIS_USER=${DB_USER}
      - REDIS_USER_PASSWORD=${DB_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
#    command: /data/script.sh
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true



#citus BD
#  master:
#    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
#    image: "citusdata/citus:13.0.3"
#    ports: ["${COORDINATOR_EXTERNAL_PORT:-65432}:5432"]
#    expose:
#      - '5432'
#    labels: ["com.citusdata.role=Master"]
#    environment: &AUTH
#      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
#      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
#      PGUSER: "${POSTGRES_USER:-postgres}"
#      PGPASSWORD: "${POSTGRES_PASSWORD}"
#      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
#    networks:
#      - internal
#  worker:
#    image: "citusdata/citus:13.0.3"
#    labels: ["com.citusdata.role=Worker"]
#    depends_on: [manager]
#    environment: *AUTH
#    command: "/wait-for-manager.sh"
#    volumes:
#      - healthcheck-volume:/healthcheck
#    networks:
#      - internal
#  manager:
#    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
#    image: "citusdata/membership-manager:0.3.0"
#    volumes:
#      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
#      - healthcheck-volume:/healthcheck
#    depends_on: [master]
#    environment: *AUTH
#    networks:
#      - internal

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
    command: >
      bash -c "
        rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_stream rabbitmq_stream_management &&
        rabbitmq-server
      "
    networks:
      - internal

  python3101:
    image: python:3.10-slim
    container_name: python3101
    volumes:
      - ./www/otusha/notifier:/app
    working_dir: /app
    ports:
      - "8765:8765"
    command: >
      bash -c "
         set -e &&
         #apt-get update && apt-get install -y libpq-dev gcc &&
         #pip install --upgrade pip &&
         pip install --no-cache-dir psycopg2-binary pika &&
         pip install websockets aio_pika &&
         echo 'üöÄ –ó–∞–ø—É—Å–∫ main.py' &&
         python create.py
         python main.py &
         python webserver.py &
         wait && echo '‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã'
      "

    depends_on:
      - postgres
      - rabbitmq
    environment:
      PYTHONUNBUFFERED: 1
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      MQ_HOST: rabbitmq
      MQ_USER: user
      MQ_PASS: pass
    networks:
      - internal


volumes:
  healthcheck-volume:

# –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–µ—Ç—å—é
networks:
  internal:
    driver: bridge



